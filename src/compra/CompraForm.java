/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compra;

import Adminstrador.LoginAdmin;
import Iva.Iva;
import Lucro.LucroComprasForm;
import Pacotes.EscolhaDoPacote;
import Reportes.GerarRelatorio;
import RestricoesEmHoras.DataDeRestricaoConnectiondb;
import Words.DeleteLastLetter;
import cliente.Cliente;
import cliente.ClienteForm;
import cliente.Clientedb;
import compra_historico.CompraHistoricoForm;
import currentDateAndTime.CurrentDateAndTime;
import current_user.CurrentUser;
import current_user.CurrentUserdb;
import forma_pagamento.FormaPagamento;
import forma_pagamento.FormaPagamentodb;
import fornecedor.FornecedorForm;
import java.awt.Cursor;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import produto.Produto;
import produto.ProdutoCadastroForm;
import produto.ProdutoForm;
import produto.ProdutoFormComprar;
import produto.Produtodb;
import tempo_trabalho_tb.TempoTrabalho;
import tempo_trabalho_tb.TempoTrabalhoForm;
import tempo_trabalho_tb.TempoTrabalhodb;
import util.CharNumberASII;
import util.Numerario;

/**
 *
 * @author vicente
 */
public class CompraForm extends javax.swing.JFrame {

    private Compra compra;
    private CompraConnectiondb compraConnectiondb;
    private Compradb compradb;
    private double totalCustoCompra, valorEntregueCliente, trocoCliente;

    private String nomeJanela,
            codigoProduto_tb = null;
    private CurrentDateAndTime time;
    private Clientedb clientedb;

    private Produtodb produtodb;
    private Produto produto;
    private FormaPagamentodb formaPagamentodb;
    private int quantidade_tb = 0;

    private TempoTrabalho tempoTrabalho;
    private TempoTrabalhodb tempoTrabalhodb;

    private CurrentUserdb currentUserdb;
    private Iva precoProduto;
    private DataDeRestricaoConnectiondb dataDeRestricaoConnectiondb;

    /**
     * Creates new form ProdutoForm
     */
    public CompraForm() {
        inicializar();

        dataDeRestricaoConnectiondb = new DataDeRestricaoConnectiondb();
        boolean permitirUsarApp = dataDeRestricaoConnectiondb.getPermicaoParaUsoDaApp();

        // se a permicao for true inverte para false
        if (!permitirUsarApp) {
            JOptionPane.showMessageDialog(null, "Impossivel efecturar vendas. \n"
                    + "O praso de uso da aplicaçao ja espirou.\n"
                    + "Entra em contacto com o Desenvolvedor da Aplicação", "ACESSO NEGADO ", JOptionPane.WARNING_MESSAGE);

            // comprarJM.setEnabled(false);
            comprarJM.setVisible(false);

            adicionarCarrinhoJB.setEnabled(false);
            codigoProdutoJT.setEnabled(false);
            venderJM.setVisible(false);
            comprarAtalho.setVisible(false);
            comprarAtalho.setEnabled(false);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        compratb = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        valorEntregueClienteJTA = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        cancelarJB = new javax.swing.JButton();
        excluirCompraJB = new javax.swing.JButton();
        actualizarJB = new javax.swing.JButton();
        calcularJB = new javax.swing.JButton();
        adicionarCarrinhoJB = new javax.swing.JButton();
        alterarQuantidade = new javax.swing.JButton();
        desabilitadoJB = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        valoresJTA = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        quantidadeJT = new javax.swing.JTextField();
        formaPagamentoJC = new javax.swing.JComboBox<>();
        nomeClienteJC = new javax.swing.JComboBox<>();
        codigoProdutoJT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        comprarJM = new javax.swing.JMenu();
        clientesJM = new javax.swing.JMenu();
        usuariosJM = new javax.swing.JMenu();
        fornecedorJM = new javax.swing.JMenu();
        produtoJM = new javax.swing.JMenu();
        historicoJM = new javax.swing.JMenu();
        venderJM = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem32 = new javax.swing.JMenuItem();
        jMenuItem33 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        canselarJM = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        comprarAtalho = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenuItem31 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compra");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jPanel4.setBackground(new java.awt.Color(0, 153, 153));

        compratb.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        compratb.setForeground(java.awt.Color.black);
        compratb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo do Produto", "Nome Produto", "Quantidade", "Preço Unitário", "Preço subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        compratb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compratbMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                compratbMouseReleased(evt);
            }
        });
        compratb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                compratbKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(compratb);
        if (compratb.getColumnModel().getColumnCount() > 0) {
            compratb.getColumnModel().getColumn(0).setResizable(false);
            compratb.getColumnModel().getColumn(1).setResizable(false);
            compratb.getColumnModel().getColumn(2).setResizable(false);
            compratb.getColumnModel().getColumn(3).setResizable(false);
            compratb.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1358, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setBackground(java.awt.Color.white);
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Valor Entregue pelo cliente");

        valorEntregueClienteJTA.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        valorEntregueClienteJTA.setForeground(java.awt.Color.black);
        valorEntregueClienteJTA.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valorEntregueClienteJTA.setText("0.00");
        valorEntregueClienteJTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valorEntregueClienteJTAMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(valorEntregueClienteJTA, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 27, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valorEntregueClienteJTA, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(0, 153, 153));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );

        jPanel14.setBackground(new java.awt.Color(0, 153, 153));

        cancelarJB.setBackground(new java.awt.Color(255, 51, 51));
        cancelarJB.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        cancelarJB.setForeground(java.awt.Color.black);
        cancelarJB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Delete-black-32.png"))); // NOI18N
        cancelarJB.setText("Canselar");
        cancelarJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cancelarJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cancelarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarJBActionPerformed(evt);
            }
        });

        excluirCompraJB.setBackground(new java.awt.Color(255, 153, 153));
        excluirCompraJB.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        excluirCompraJB.setForeground(java.awt.Color.black);
        excluirCompraJB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Delete-black-32.png"))); // NOI18N
        excluirCompraJB.setText("Excluir");
        excluirCompraJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        excluirCompraJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        excluirCompraJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirCompraJBActionPerformed(evt);
            }
        });

        actualizarJB.setBackground(new java.awt.Color(102, 255, 204));
        actualizarJB.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        actualizarJB.setForeground(java.awt.Color.black);
        actualizarJB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/update-button-32.png"))); // NOI18N
        actualizarJB.setText("Actualizar");
        actualizarJB.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        actualizarJB.setDebugGraphicsOptions(javax.swing.DebugGraphics.LOG_OPTION);
        actualizarJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        actualizarJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        actualizarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarJBActionPerformed(evt);
            }
        });

        calcularJB.setBackground(new java.awt.Color(102, 255, 204));
        calcularJB.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        calcularJB.setForeground(java.awt.Color.black);
        calcularJB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/calculator-icon-32.png"))); // NOI18N
        calcularJB.setText("Calcular");
        calcularJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        calcularJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        calcularJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularJBActionPerformed(evt);
            }
        });

        adicionarCarrinhoJB.setBackground(new java.awt.Color(255, 153, 51));
        adicionarCarrinhoJB.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        adicionarCarrinhoJB.setForeground(java.awt.Color.black);
        adicionarCarrinhoJB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/shopping_cart-black -32.png"))); // NOI18N
        adicionarCarrinhoJB.setText("Adicionar ao Carrinho");
        adicionarCarrinhoJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        adicionarCarrinhoJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        adicionarCarrinhoJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarCarrinhoJBActionPerformed(evt);
            }
        });

        alterarQuantidade.setBackground(new java.awt.Color(204, 255, 51));
        alterarQuantidade.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        alterarQuantidade.setForeground(java.awt.Color.black);
        alterarQuantidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/update-button-32.png"))); // NOI18N
        alterarQuantidade.setText("Alterar quantidade");
        alterarQuantidade.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alterarQuantidade.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alterarQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarQuantidadeActionPerformed(evt);
            }
        });

        desabilitadoJB.setBackground(new java.awt.Color(255, 153, 153));
        desabilitadoJB.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        desabilitadoJB.setForeground(java.awt.Color.black);
        desabilitadoJB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/contract-icon-black-32.png"))); // NOI18N
        desabilitadoJB.setText("Foi desabilitado");
        desabilitadoJB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        desabilitadoJB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        desabilitadoJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desabilitadoJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adicionarCarrinhoJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addComponent(excluirCompraJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelarJB, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(actualizarJB)
                        .addGap(18, 18, 18)
                        .addComponent(calcularJB, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(alterarQuantidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(desabilitadoJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(calcularJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actualizarJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(excluirCompraJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelarJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(alterarQuantidade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(adicionarCarrinhoJB, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desabilitadoJB, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        valoresJTA.setColumns(20);
        valoresJTA.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        valoresJTA.setForeground(java.awt.Color.black);
        valoresJTA.setRows(3);
        valoresJTA.setText("Total:\nValor Entregue:\nTroco:");
        jScrollPane4.setViewportView(valoresJTA);

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        quantidadeJT.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        quantidadeJT.setForeground(java.awt.Color.black);
        quantidadeJT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantidadeJT.setText("1");
        quantidadeJT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quantidadeJTMouseClicked(evt);
            }
        });
        quantidadeJT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantidadeJTKeyPressed(evt);
            }
        });

        formaPagamentoJC.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        formaPagamentoJC.setForeground(java.awt.Color.black);

        nomeClienteJC.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        nomeClienteJC.setForeground(java.awt.Color.black);
        nomeClienteJC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome do Cliente" }));
        nomeClienteJC.setToolTipText("");

        codigoProdutoJT.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        codigoProdutoJT.setForeground(java.awt.Color.black);
        codigoProdutoJT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codigoProdutoJT.setText("Código do Produto");
        codigoProdutoJT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoProdutoJTKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setForeground(java.awt.Color.black);
        jLabel2.setText("Quantidade");

        jButton1.setBackground(new java.awt.Color(102, 255, 204));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jButton1.setForeground(java.awt.Color.black);
        jButton1.setText("+");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 153));
        jButton2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jButton2.setForeground(java.awt.Color.black);
        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 255, 204));
        jButton4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jButton4.setForeground(java.awt.Color.black);
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/duplicate-icon-black-32.png"))); // NOI18N
        jButton4.setText("duplicar");
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantidadeJT)
                    .addComponent(formaPagamentoJC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nomeClienteJC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(codigoProdutoJT, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codigoProdutoJT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formaPagamentoJC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nomeClienteJC, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantidadeJT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel6.setForeground(java.awt.Color.black);
        jLabel6.setText("MS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 467, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setForeground(java.awt.Color.black);
        jLabel4.setText("para o praso expirar.");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel7.setForeground(java.awt.Color.black);
        jLabel7.setText("meses");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel5.setForeground(java.awt.Color.black);
        jLabel5.setText("Faltão");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1710, 1710, 1710))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(java.awt.Color.white);

        comprarJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Comprar.PNG"))); // NOI18N
        comprarJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comprarJMMouseClicked(evt);
            }
        });
        jMenuBar1.add(comprarJM);

        clientesJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Cliente.PNG"))); // NOI18N
        clientesJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientesJMMouseClicked(evt);
            }
        });
        jMenuBar1.add(clientesJM);

        usuariosJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Usuarios.PNG"))); // NOI18N
        usuariosJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usuariosJMMouseClicked(evt);
            }
        });
        jMenuBar1.add(usuariosJM);

        fornecedorJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Fornecedor.PNG"))); // NOI18N
        fornecedorJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fornecedorJMMouseClicked(evt);
            }
        });
        jMenuBar1.add(fornecedorJM);

        produtoJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Produtos.PNG"))); // NOI18N
        produtoJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                produtoJMMouseClicked(evt);
            }
        });
        produtoJM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                produtoJMActionPerformed(evt);
            }
        });
        jMenuBar1.add(produtoJM);

        historicoJM.setForeground(java.awt.Color.black);
        historicoJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Historico de Compra.PNG"))); // NOI18N
        historicoJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historicoJMMouseClicked(evt);
            }
        });
        jMenuBar1.add(historicoJM);

        venderJM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Vender.PNG"))); // NOI18N
        venderJM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                venderJMMouseClicked(evt);
            }
        });
        jMenuBar1.add(venderJM);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Atalhos-menu.PNG"))); // NOI18N

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem21.setBackground(java.awt.Color.white);
        jMenuItem21.setText("Actualizar");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem21);

        jMenuItem32.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem32.setBackground(java.awt.Color.white);
        jMenuItem32.setText("Adicionar no Carrinho");
        jMenuItem32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem32ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem32);

        jMenuItem33.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        jMenuItem33.setBackground(java.awt.Color.white);
        jMenuItem33.setText("Adicionar no Carrinho");
        jMenuItem33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem33ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem33);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem22.setBackground(java.awt.Color.white);
        jMenuItem22.setText("Calcular");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem22);

        canselarJM.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        canselarJM.setBackground(java.awt.Color.white);
        canselarJM.setText("Canselar");
        canselarJM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canselarJMActionPerformed(evt);
            }
        });
        jMenu1.add(canselarJM);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem2.setBackground(java.awt.Color.white);
        jMenuItem2.setText("Cliente");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        comprarAtalho.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        comprarAtalho.setBackground(java.awt.Color.white);
        comprarAtalho.setText("Comprar");
        comprarAtalho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarAtalhoActionPerformed(evt);
            }
        });
        jMenu1.add(comprarAtalho);

        jMenuItem23.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem23.setBackground(java.awt.Color.white);
        jMenuItem23.setText("Excluir");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem23);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem15.setBackground(java.awt.Color.white);
        jMenuItem15.setText("Fornecedor");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem15);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem18.setBackground(java.awt.Color.white);
        jMenuItem18.setText("Histórico");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem18);

        jMenuItem29.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        jMenuItem29.setBackground(java.awt.Color.white);
        jMenuItem29.setText("Limpar Quantidade");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem29);

        jMenuItem30.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, 0));
        jMenuItem30.setBackground(java.awt.Color.white);
        jMenuItem30.setText("Somar");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem30);

        jMenuItem31.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, 0));
        jMenuItem31.setBackground(java.awt.Color.white);
        jMenuItem31.setText("Subtrair");
        jMenuItem31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem31ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem31);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem17.setBackground(java.awt.Color.white);
        jMenuItem17.setText("Produtos");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem17);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem14.setBackground(java.awt.Color.white);
        jMenuItem14.setText("Usuário");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem14);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem19.setBackground(java.awt.Color.white);
        jMenuItem19.setText("Vender");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
        jMenuItem20.setBackground(java.awt.Color.white);
        jMenuItem20.setText("Vender");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem20);

        jMenuItem28.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem28.setBackground(java.awt.Color.white);
        jMenuItem28.setText("Outros");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem28ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem28);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/outros-menu.PNG"))); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1358, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarJBActionPerformed

        actualizarCompra();


    }//GEN-LAST:event_actualizarJBActionPerformed

    private void compratbKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_compratbKeyReleased

        produtotb();
        // TODO add your handling code here:
    }//GEN-LAST:event_compratbKeyReleased

    private void compratbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compratbMouseReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_compratbMouseReleased

    private void compratbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compratbMouseClicked

        produtotb();
    }//GEN-LAST:event_compratbMouseClicked

    private void calcularJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularJBActionPerformed

        if (!valorEntregueClienteJTA.getText().equalsIgnoreCase("0.00")) {
            calcular();
        } else {
            JOptionPane.showMessageDialog(null, "Valor entregue pelo cliente invalido",
                    "ERRO NO VALOR INSERIDO",
                    JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_calcularJBActionPerformed

    private void excluirCompraJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirCompraJBActionPerformed

        excluirProdutoCompra();

    }//GEN-LAST:event_excluirCompraJBActionPerformed

    private void cancelarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarJBActionPerformed

        devolverProdutos();
        canselarCompra("desistir-da-compra");
    }//GEN-LAST:event_cancelarJBActionPerformed

    private void comprarJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comprarJMMouseClicked

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "comprar";
        JFrameChoose(nomeJanela);

        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));


    }//GEN-LAST:event_comprarJMMouseClicked

    private void clientesJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientesJMMouseClicked

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "cliente";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_clientesJMMouseClicked

    private void fornecedorJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fornecedorJMMouseClicked
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "fornecedor";
        JFrameChoose(nomeJanela);

        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_fornecedorJMMouseClicked

    private void produtoJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_produtoJMMouseClicked

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        this.nomeJanela = "produto";
        JFrameChoose(nomeJanela);

        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_produtoJMMouseClicked

    private void venderJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_venderJMMouseClicked

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        vender();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        // TODO add your handling code here:
    }//GEN-LAST:event_venderJMMouseClicked

    private void comprarAtalhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarAtalhoActionPerformed

        this.nomeJanela = "comprar";
        JFrameChoose(nomeJanela);


    }//GEN-LAST:event_comprarAtalhoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "cliente";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "fornecedor";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void historicoJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historicoJMMouseClicked

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "historico";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_historicoJMMouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "outros";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "produto";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "historico";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        vender();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        actualizarCompra();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed

        calcular();
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        excluirProdutoCompra();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void canselarJMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canselarJMActionPerformed

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        canselarCompra("desistir-da-compra");
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_canselarJMActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "usuarios";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        horasSaida();

    }//GEN-LAST:event_formWindowClosing

    private void quantidadeJTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantidadeJTKeyPressed
        // Select and insert produto 
    }//GEN-LAST:event_quantidadeJTKeyPressed

    private void codigoProdutoJTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoProdutoJTKeyPressed
        adicionar();
        actualizarQuantidade("alterar-com-a-pistola");

    }//GEN-LAST:event_codigoProdutoJTKeyPressed

    private void quantidadeJTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quantidadeJTMouseClicked

        quantidadeJT.setText("1");
        // TODO add your handling code here:
    }//GEN-LAST:event_quantidadeJTMouseClicked

    private void jMenuItem28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem28ActionPerformed

        this.nomeJanela = "outros";
        JFrameChoose(nomeJanela);
    }//GEN-LAST:event_jMenuItem28ActionPerformed

    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed

        quantidadeJT.setText("1");

    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        somar();
        actualizarQuantidadeProduto("aumentar-a-quantidade-de-produtos");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        subtrair();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    private void jMenuItem31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem31ActionPerformed
        subtrair();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem31ActionPerformed

    private void adicionarCarrinhoJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarCarrinhoJBActionPerformed
        adicionar();
    }//GEN-LAST:event_adicionarCarrinhoJBActionPerformed

    private void jMenuItem32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem32ActionPerformed

        adicionar();
    }//GEN-LAST:event_jMenuItem32ActionPerformed

    private void jMenuItem33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem33ActionPerformed
        adicionar();
    }//GEN-LAST:event_jMenuItem33ActionPerformed

    private void desabilitadoJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desabilitadoJBActionPerformed
        new LoginAdmin("desenvolvedor", "Denvolvedor do Software").setVisible(true);
    }//GEN-LAST:event_desabilitadoJBActionPerformed

    private void alterarQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarQuantidadeActionPerformed
        // Alterar quantidade sem a pistola(pelo botão)
        actualizarQuantidade("alterar-com-butao");
    }//GEN-LAST:event_alterarQuantidadeActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        duplicar();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void valorEntregueClienteJTAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valorEntregueClienteJTAMouseClicked
        valorEntregueClienteJTA.setText("");
    }//GEN-LAST:event_valorEntregueClienteJTAMouseClicked

    private void usuariosJMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usuariosJMMouseClicked
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.nomeJanela = "usuarios";
        JFrameChoose(nomeJanela);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));      // TODO add your handling code here:
    }//GEN-LAST:event_usuariosJMMouseClicked

    private void produtoJMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_produtoJMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_produtoJMActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompraForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarJB;
    private javax.swing.JButton adicionarCarrinhoJB;
    private javax.swing.JButton alterarQuantidade;
    private javax.swing.JButton calcularJB;
    private javax.swing.JButton cancelarJB;
    private javax.swing.JMenuItem canselarJM;
    private javax.swing.JMenu clientesJM;
    private javax.swing.JTextField codigoProdutoJT;
    private javax.swing.JMenuItem comprarAtalho;
    private javax.swing.JMenu comprarJM;
    private javax.swing.JTable compratb;
    private javax.swing.JButton desabilitadoJB;
    private javax.swing.JButton excluirCompraJB;
    private javax.swing.JComboBox<String> formaPagamentoJC;
    private javax.swing.JMenu fornecedorJM;
    private javax.swing.JMenu historicoJM;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem33;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox<String> nomeClienteJC;
    private javax.swing.JMenu produtoJM;
    private javax.swing.JTextField quantidadeJT;
    private javax.swing.JMenu usuariosJM;
    private javax.swing.JTextField valorEntregueClienteJTA;
    private javax.swing.JTextArea valoresJTA;
    private javax.swing.JMenu venderJM;
    // End of variables declaration//GEN-END:variables

    // Verificar os campos de texto
    private boolean campoQuantidadeJT() {
        return valorEntregueClienteJTA.getText().isEmpty(); // true
    }

    private void produtotb() {

        try {

            if (compratb.getSelectedRow() != -1) {

                this.codigoProduto_tb = compratb.getValueAt(compratb.getSelectedRow(), 0).toString();

//              String classeProduto = produtotb.getValueAt(produtotb.getSelectedRow(), 1).toString();
                String strQuantidade = compratb.getValueAt(compratb.getSelectedRow(), 2).toString();
                this.quantidade_tb = Integer.parseInt(strQuantidade);
//              String valorClientePagar = produtotb.getValueAt(produtotb.getSelectedRow(), 3).toString();
                // String codigoProduto = produtotb.getValueAt(produtotb.getSelectedRow(), 1).toString();

                // quantidadeJT.setText(strQuantidade);
            }

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Seleciona um item para alterar",
                    "IMPOSSÍVEL ALTERAR O PRODUTO NA TABELA",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }
//
//    nome_produto, classe_produto, nome_fornecedor,
//                 	   data_fabrico, data_expiracao, data_registo,
//                 	   quantidade, preco, iva, valor_pagar_cliente, 
//                 	   codigo_produto,   
//                 	   usuario_tb.nome_usuario

    private void compraTableView() {

        compradb = new Compradb();

        DefaultTableModel modelo = (DefaultTableModel) compratb.getModel();
        modelo.setNumRows(0);

        for (Compra fr : compradb.read()) {
            modelo.addRow(new Object[]{
                fr.getCodigoProduto(),
                fr.getNomeProduto(),
                fr.getQuantidade(),
                fr.getValorUnitarioDisplay(),
                fr.getSubTotalDisplay()

            });

        }

        compradb = new Compradb();
        this.totalCustoCompra = compradb.getTotalSomaSubtotal();

        valoresJTA(totalCustoCompra, 0.0, 0.0);

    }

    private void valoresJTA(double total, double valorEntregueCliente, double troco) {
        Numerario numberTotal,
                numberValorEntregueCliente,
                numberTroco;

        numberTotal = new Numerario(total);
        numberValorEntregueCliente = new Numerario(valorEntregueCliente);
        numberTroco = new Numerario(troco);

        if (valorEntregueCliente == 0.00) { // Se o Cliente ainda não pagou

            valoresJTA.setText(""
                    + "Total: " + numberTotal.getNumberFormated() + " kz\n"
                    + "Valor Entregue: " + numberValorEntregueCliente.getNumberFormated() + " kz\n"
                    + "Troco: " + numberTroco.getNumberFormated() + " kz\n"
            );

        } else if (valorEntregueCliente < total) { // Se o valor entregrue pelo cliente inferior ao custo da compra
//            JOptionPane.showMessageDialog(null, "O valor pago pelo cliente insuficiente",
//                    "COMPRAR PRODUTOS", JOptionPane.ERROR_MESSAGE);

            valoresJTA.setText(""
                    + "Total: " + numberTotal.getNumberFormated() + "0 kz\n"
                    + "Valor Entregue: Insuficiente para comprar\n"
                    + "Troco: Impossível dar troco\n"
            );

        } else { // Se o valor entregue pele cliente for suficiente para a compra, mostra o valor entrege e o troco 

            numberTotal = new Numerario(total);
            numberValorEntregueCliente = new Numerario(valorEntregueCliente);
            numberTroco = new Numerario(troco);
            valoresJTA.setText(""
                    + "Total: " + numberTotal.getNumberFormated() + " kz\n"
                    + "Valor Entregue: " + numberValorEntregueCliente.getNumberFormated() + " kz\n"
                    + "Troco: " + numberTroco.getNumberFormated() + " kz\n"
            );
        }

    }

    private boolean clienteFezCompra() {

        return totalCustoCompra > 0
                && valorEntregueCliente > 0
                && trocoCliente >= 0;

    }

    private void JFrameChoose(String nomeJanela) {

        switch (nomeJanela) {

            case "comprar":
                new ProdutoFormComprar().setVisible(true);
                break;

            case "cliente":
                new ClienteForm().setVisible(true);
                break;

            case "usuarios":
                // acessar o menu e para criar novo usuario
                new LoginAdmin("usuarios", "Administrador").setVisible(true);
                break;

            case "fornecedor":
                new FornecedorForm().setVisible(true);
                break;

            case "produto":
                new LoginAdmin("produto", "Administrador").setVisible(true);
                break;

            case "historico":
                new CompraHistoricoForm().setVisible(true);
                break;
            case "lucro":
                new LucroComprasForm().setVisible(true);
                break;
            case "horarioTrabalho":
                new TempoTrabalhoForm().setVisible(true);
                break;
            default:
                new OutrosForm().setVisible(true);
                break;
        }

    }

    private void vender() {

        try {

            if (clienteFezCompra()) {
                compra = new Compra();

                // set os valores entregue, troco e o cuto total da compra para salvar
                compra.setValorPagarCliente(valorEntregueCliente);
                compra.setValorTotal(totalCustoCompra);
                compra.setTrocoCliente(trocoCliente);

                // get o método de pagamento para salvar
                formaPagamentodb = new FormaPagamentodb();
                String nomeFormaPagamento = formaPagamentoJC.getSelectedItem().toString();

                // Pesquizar de devolver o id da forma de pagamento
                int idFormaPagamento = formaPagamentodb.getIdFormaPagamento(new FormaPagamento(nomeFormaPagamento));
                //            System.out.println("Id da forma de pagamento: " + idFormaPagamento);
                // set forma de pagamento na compra
                compra.setFormaPagamento(new FormaPagamento(idFormaPagamento));

                // salvar todos os dados na compra
                compraConnectiondb = new CompraConnectiondb();
                compraConnectiondb.actualizar(compra);

                //   setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                new GerarRelatorio("Factura.jasper").gerarRelatorio();
                //  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                valorEntregueClienteJTA.setText("0.00");

                canselarCompra("eliminar-para-nova-compra");

            } else if (valorEntregueCliente < totalCustoCompra) {
                JOptionPane.showMessageDialog(null, "O valor entregue pelo cliente não é suficiente",
                        "SALVAR O COMPRA DO CLIENTE", JOptionPane.ERROR_MESSAGE);
            } else {

                JOptionPane.showMessageDialog(null, "Esse cliente não fez nenhuma compra\n"
                        + "ou não entregou nenhum valor.",
                        "SALVAR O COMPRA DO CLIENTE", JOptionPane.ERROR_MESSAGE);
            }
            // mostra a factura
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(null, "Possiveis erros:\n"
                    + "1 - Verifica os valores inseridos nos campos numericos\n"
                    + "Quantidade, Preço, Código ;\n"
                    + "2 - Tenha a certeza que os campos de Data de Fabricação\n"
                    + "Data de Expiração não estejam vazios.",
                    "ERRO AO SALVAR O PRODUTO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }

    private void actualizarCompra() {

        compraTableView();

        compradb = new Compradb();
        this.totalCustoCompra = compradb.getTotalSomaSubtotal();

        valoresJTA(totalCustoCompra, 0.0, 0.0);

    }

    private void calcular() {

        try {

            compradb = new Compradb();
            this.totalCustoCompra = compradb.getTotalSomaSubtotal();

            CharNumberASII eliminarLetras = new CharNumberASII(valorEntregueClienteJTA.getText());
            String novoValorEntregue = eliminarLetras.getStringNumber();
            if (novoValorEntregue == null) {
                JOptionPane.showMessageDialog(null, "Valor entregue pelo cliente invalido",
                        "ERRO NO VALOR INSERIDO",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                this.valorEntregueCliente = Double.parseDouble(novoValorEntregue);
                this.trocoCliente = valorEntregueCliente - totalCustoCompra;

                // Elimina as letras e retorna 1234
                valoresJTA(totalCustoCompra, valorEntregueCliente, trocoCliente);
                compradb = null;
            }

        } catch (NumberFormatException e) {

            // e.printStackTrace();
//            JOptionPane.showMessageDialog(null, "Elimina as letra que existe no campo do "
//                    + "\"Valor Entregue pelo Cliente\"");
            // get os valores com as letras ex: 1234ARST
            compradb = null;
        } finally {
            compradb = null;
        }

    }

    private void canselarCompra(String opcao) {

        switch (opcao) {
            case "desistir-da-compra":
                int decisao = JOptionPane.showConfirmDialog(null, "Deseja cancelar a compra?",
                        "CANCELAR COMPRA", JOptionPane.YES_NO_OPTION); // YES = 0;

                if (decisao == 0) {
                    eliminarCompra();
                }

                break;
            case "eliminar-para-nova-compra":
                eliminarCompra();
                break;
            default:
                break;

        }

    }

    private void eliminarCompra() {

        compradb = new Compradb();
        compradb.drop_tb();
        compradb = new Compradb();
        compradb.create_tb();
        compraTableView();
    }

    // Eliminar um produto na compra
    private void excluirProdutoCompra() {

        try {

            produto = new Produto(codigoProduto_tb);
            produtodb = new Produtodb();

            produto = produtodb.getProtudoPeloCodigo(codigoProduto_tb);
            //  System.out.println("Coodigo do produto " + produto.getCodigoProduto());
            // Quantidae do produto devolvido + A quantidade do produto em stock
            produtodb = new Produtodb();
            quantidade_tb += produtodb.getQuantidade(produto);

            produtodb = new Produtodb();
            produtodb.updateQuantidade(quantidade_tb, produto);

            compra = new Compra();
            compra.setIdProduto(produto.getIdProduto());

            compraConnectiondb = new CompraConnectiondb();
            compraConnectiondb.eliminar(compra);

            compraTableView();

        } catch (IndexOutOfBoundsException e) {

            JOptionPane.showMessageDialog(null, "Seleciona um elemento para excuir",
                    "TABELA DE COMPRAS", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void formaPagamentoViewJC() {

        formaPagamentodb = new FormaPagamentodb();

        for (FormaPagamento pag : formaPagamentodb.read()) {

            formaPagamentoJC.addItem(pag.getForma_pagamento());

        }

        formaPagamentoJC.setSelectedItem("Numerário");
    }

    private void adicionar() {

        if (campoQuantidadeJT()) {

            JOptionPane.showMessageDialog(null, "Os campos de quantidade não pode estar vazios",
                    "ADICIONAR PRODUTO", JOptionPane.ERROR_MESSAGE);

        } else {

            try {

                compra = new Compra();

                // ---------------------------FOREIGN KEY---------------------------
                // Get cliente ID to save on compra_tb
                String nomeCliente = nomeClienteJC.getSelectedItem().toString();
                clientedb = new Clientedb();

                int idCliente = 0;
                if ("Nome do Cliente".equals(nomeCliente)) {
                    idCliente = clientedb.getIdClente(new Cliente("Anônimo"));
                } else {
                    idCliente = clientedb.getIdClente(new Cliente(nomeCliente));
                }

                compra.setCliente(new Cliente(idCliente));

                //------------------------------------------------------------------
                //   String quantidad = quantidadeJTA.getText();
                // Quantidade do produto selecionado = 0 significa que não quero alterar a quantidade
                int quantidade = Integer.parseInt(quantidadeJT.getText().trim());

                compra.setQuantidade(quantidade);

                produtodb = new Produtodb();
                produto = new Produto();

                //Remover todas as ultimas letras que o codigo possue
                CharNumberASII codigo = new CharNumberASII(codigoProdutoJT.getText().trim());

                produto = produtodb.getProtudoPeloCodigo(codigo.getStringNumber());

                // Buscar o Usuario corrente fez o login na aplicacão;
                currentUserdb = new CurrentUserdb();
                int idCurrenteUser = currentUserdb.feachIdCurrentUser();
                produto.setCurrentUser(new CurrentUser(idCurrenteUser));

                // gettting all price of products
                double precoUnidade = produto.getPreco();
                precoProduto = new Iva(precoUnidade); // 1000kz
                double iva = precoProduto.getProdutoIva(); // 140kz
                double novoPrecoComIva = precoProduto.getNovoPrecoComIva(); // 1000 + 140
                double subtotal = quantidade * novoPrecoComIva;
                iva *= quantidade;

                // Lucro de um produto comprado
                double lucroProdutoComprado = produto.getLucroProdutoUnitario() * quantidade;
                compra.setLucro(lucroProdutoComprado);
//                System.out.println("Lucro do produto adicionado: "+lucroProdutoComprado);
                //settting all price of products
                compra.setIva(iva);
                compra.setSubTotal(subtotal);

                // getting current time and date
                time = new CurrentDateAndTime();
                compra.setDataCompra(time.getCurrentDate());
                compra.setHora(time.getCurrentHour());

                compra.setQuantidade(quantidade);

                compraConnectiondb = new CompraConnectiondb();

                // Salvar todos os produtos na tabela compra
                compraConnectiondb = new CompraConnectiondb();
                boolean salvou = compraConnectiondb.salvar(compra, produto);

                if (salvou) {
                    compraTableView();
                    quantidadeJT.setText("1");
                    this.quantidade_tb = 0;

                }

            } catch (NumberFormatException | NullPointerException e) {

                JOptionPane.showMessageDialog(null, "Possiveis erros:\n"
                        + "*** Verifica os valores inseridos nos campo no:**"
                        + "1 - \"Valor Entregue Pelo Cliente\"\n"
                        + "2 - \"Código do Produto\"\n"
                        + "Data de Expiração não estejam vazios.",
                        "ERRO AO SALVAR O PRODUTO", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    private void duplicar() {

        int quantidade = Integer.parseInt(quantidadeJT.getText().trim());
        int valorDuplicado = quantidade * 2;
        quantidadeJT.setText(String.valueOf(valorDuplicado));
    }

    private void somar() {

        int quantidade = Integer.parseInt(quantidadeJT.getText().trim());
        int valorDuplicado = quantidade + 1;
        quantidadeJT.setText(String.valueOf(valorDuplicado));
    }

    private void subtrair() {

        int quantidade = Integer.parseInt(quantidadeJT.getText().trim());
        if (quantidade > 1) {

            int valorDuplicado = quantidade - 1;
            quantidadeJT.setText(String.valueOf(valorDuplicado));

        } else {
            JOptionPane.showMessageDialog(null, "Quantidade muito inferior."
                    + "\nImpossível diminuir a quantidade",
                    "DIMINUIR A QUANTIDADE DE ITENS", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void inicializar() {
        setTitle("Adicionar Produtos para Compra");
        initComponents();

        this.setLocationRelativeTo(null);
        getRootPane().setDefaultButton(adicionarCarrinhoJB);

        time = new CurrentDateAndTime();

        DefaultTableModel modelo = (DefaultTableModel) compratb.getModel();
        compratb.setRowSorter(new TableRowSorter(modelo));
        quantidadeJT.setEditable(false);
        compraTableView();
        formaPagamentoViewJC();

        valoresJTA.setEditable(false);
    }

    private void actualizarQuantidade(String opcao) {

        if (codigoProduto_tb == null) {
            JOptionPane.showMessageDialog(null, "Não foi possível actualizar a compra.\n "
                    + " Seleciona um produto para afectuar a actualização",
                    "ACTUALIZAR QUANTIDADE NA COMPRA", JOptionPane.ERROR_MESSAGE);

        } else {

            try {
                int quantidadeEmStock = 0;
                int quantidade = 0;

                switch (opcao) {
                    case "alterar-com-a-pistola":

                        // Verificar se o produto já exite na lista de compra
                        produto = new Produto();
                        produto.setCodigoProduto(codigoProdutoJT.getText());
                        compradb = new Compradb();
                        boolean existe = compradb.contem(produto);

                        if (!existe) {

                            actualizarQuantidade(null);

                        } else {
                            // Se existe então adiciona mais um na sua quantidade
                            quantidade = Integer.parseInt(quantidadeJT.getText().trim()) + 1;
                            quantidadeJT.setText(String.valueOf(quantidade));

                            // Descontar a quantidade do produto no DB
                            compraConnectiondb = new CompraConnectiondb();
                            quantidadeEmStock = compraConnectiondb.validarCompra(quantidade, produto);

                        }
                        // Quantidade desejada para actualização
                        break;

                    default:
                        // alterar sem a pistola;
                        quantidade = Integer.parseInt(quantidadeJT.getText().trim()); // Quantidade desejada para actualização
                        break;
                }

                compra = new Compra();

                //------------------------------------------------------------------
                produtodb = new Produtodb();
                produto = new Produto();
                produto = produtodb.getProtudoPeloCodigo(codigoProduto_tb);

                // novaQuantidade = 
                int novaQuantidade = quantidade_tb - quantidade;
                //  Se novaQuantidade > 1 . Significa que o cliente divolveu alguns produtos. 
                // Vamos repor os produtos divolvidos no banco de dados
                if (novaQuantidade > 1) {
                    produtodb = new Produtodb();
                    // Quantidade do produto no stock + a Quantidade divolvida
                    int q = produtodb.getQuantidade(produto) + novaQuantidade;

                    produtodb = new Produtodb();
                    produtodb.updateQuantidade(q, produto);
                } else if (quantidade != 1) { // Se a quantidadeJT != 1 significa de o usuario adicionou + produtos

                    // Descontar a quantidade do produto no DB
                    // O cliente decidio comprar o produto
                    compraConnectiondb = new CompraConnectiondb();
                    // Quantidade da JTable + quantidade JTfield 
                    quantidade += quantidade_tb;
                    quantidadeEmStock = compraConnectiondb.validarCompra(quantidade, produto);
                }

                compra.setQuantidade(quantidade);

                // gettting all price of products
                // System.out.println(" quantidade id do produto = " + produto.getIdProduto());
                double precoUnidade = produto.getPreco();
                precoProduto = new Iva(precoUnidade); // 1000kz
                double iva = precoProduto.getProdutoIva(); // 140kz
                double novoPrecoComIva = precoProduto.getNovoPrecoComIva(); // 1000 + 140
                compra.setValorUnitario(novoPrecoComIva);
                double subtotal = quantidade * novoPrecoComIva;
                iva *= quantidade;

                // Lucro de um produto comprado
                double lucroProdutoComprado = produto.getLucroProdutoUnitario() * quantidade;
                compra.setLucro(lucroProdutoComprado);
//                System.out.println("Lucro do produto adicionado: "+lucroProdutoComprado);
                //settting all price of products
                compra.setIva(iva);
                compra.setSubTotal(subtotal);

                compra.setQuantidade(quantidade);
                // compra.setIdCompra(id_compra_tb); // guarda idCompra para ser alterado
                // Se a quantidade em stock for maior que 1 então podemos vender o produto
                if (quantidadeEmStock > -1) {
                    compradb = new Compradb();
                    compradb.updateQuantidade(compra, produto);

                    compraTableView();
                }

                this.quantidade_tb = 0;

                this.codigoProduto_tb = null;
            } catch (NumberFormatException | NullPointerException e) {

                e.printStackTrace();
            }

        }

    }

    private void devolverProdutos() {

        compradb = new Compradb();

        String codigo = null;
        int quantidade = 0;

        // O cliente não quero comprar todos os produtos escolhidos
        for (Compra compra : compradb.read()) {

            codigo = compra.getCodigoProduto();
            quantidade = compra.getQuantidade();

            produtodb = new Produtodb();
            produto = new Produto(codigo);
            // Quantidade dos produtos devolvidos + a quantidade dos produtos em stock
            quantidade += produtodb.getQuantidade(produto);

            produtodb = new Produtodb();
            produtodb.updateQuantidade(quantidade, produto);

            produtodb = null;
            produto = null;
            codigo = null;
            quantidade = 0;

        }
    }

    private void horasSaida() {

        int opcao = JOptionPane.showConfirmDialog(null, "Deseja terminar a aplicação?",
                "TERMINAR A APLICAÇÃO ", JOptionPane.YES_NO_OPTION); // YES = 0;

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        // Obter a hora corrente e colocar no trabalho
        time = new CurrentDateAndTime();
        String dataHoraSaida = time.getCurrentDate() + " " + time.getCurrentHour();
        tempoTrabalho = new TempoTrabalho("", dataHoraSaida);

        // Salvar a hora de saida no DB
        tempoTrabalhodb = new TempoTrabalhodb();
        tempoTrabalhodb.updateHoraSaidaa(tempoTrabalho);

        if (opcao == 0) {
            devolverProdutos();
            canselarCompra("desistir-da-compra");

            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            setDefaultCloseOperation(EXIT_ON_CLOSE);
        }

    }

    // Aumenta e diminue a quantidade de produtos na DB
    private void actualizarQuantidadeProduto(String aumentaraquantidadedeprodutos) {

    }

}
